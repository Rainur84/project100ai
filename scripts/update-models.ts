import { fetchNewModels } from './utils/rssParser';
import { formatModel } from './utils/modelFormatter';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// –†–µ—à–µ–Ω–∏–µ –¥–ª—è __dirname –≤ ES-–º–æ–¥—É–ª–µ
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const aiModelsPath = path.resolve(__dirname, '../src/data/aiModels.ts');

async function updateModels() {
  const newModels = await fetchNewModels();

  if (newModels.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
    return;
  }

  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: ${newModels.length}`);
  newModels.forEach((model, index) => {
    console.log(`${index + 1}. ${model.title}`);
  });

  const formattedModels = newModels.map(formatModel);
  const aiModelsContent = fs.readFileSync(aiModelsPath, 'utf-8');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∫–æ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–¥–æ–±–∞–≤—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é 1 —Ä–∞–∑ –≤ aiModels.ts!)
  const anchor = '// __AUTO_INSERT_MODELS__';
  if (!aiModelsContent.includes(anchor)) {
    console.error(`‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —è–∫–æ—Ä—å ${anchor}`);
    return;
  }

  const updatedContent = aiModelsContent.replace(
    anchor,
    `${formattedModels.join(',\n')},\n${anchor}`
  );

  fs.writeFileSync(aiModelsPath, updatedContent, 'utf-8');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${newModels.length}`);
}

updateModels().catch(console.error);